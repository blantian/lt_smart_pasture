package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.farmer.butie.ButieList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUTIE_LIST".
*/
public class ButieListDao extends AbstractDao<ButieList, String> {

    public static final String TABLENAME = "BUTIE_LIST";

    /**
     * Properties of entity ButieList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Status = new Property(1, int.class, "status", false, "STATUS");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Hukou_id = new Property(3, String.class, "hukou_id", false, "HUKOU_ID");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Price = new Property(5, String.class, "price", false, "PRICE");
        public final static Property Addtime = new Property(6, String.class, "addtime", false, "ADDTIME");
        public final static Property Shenhe = new Property(7, String.class, "shenhe", false, "SHENHE");
    }


    public ButieListDao(DaoConfig config) {
        super(config);
    }
    
    public ButieListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUTIE_LIST\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"STATUS\" INTEGER NOT NULL ," + // 1: status
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"HUKOU_ID\" TEXT," + // 3: hukou_id
                "\"TITLE\" TEXT," + // 4: title
                "\"PRICE\" TEXT," + // 5: price
                "\"ADDTIME\" TEXT," + // 6: addtime
                "\"SHENHE\" TEXT);"); // 7: shenhe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUTIE_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ButieList entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getStatus());
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String hukou_id = entity.getHukou_id();
        if (hukou_id != null) {
            stmt.bindString(4, hukou_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(7, addtime);
        }
 
        String shenhe = entity.getShenhe();
        if (shenhe != null) {
            stmt.bindString(8, shenhe);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ButieList entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getStatus());
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String hukou_id = entity.getHukou_id();
        if (hukou_id != null) {
            stmt.bindString(4, hukou_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(7, addtime);
        }
 
        String shenhe = entity.getShenhe();
        if (shenhe != null) {
            stmt.bindString(8, shenhe);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ButieList readEntity(Cursor cursor, int offset) {
        ButieList entity = new ButieList( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hukou_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // addtime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // shenhe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ButieList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStatus(cursor.getInt(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHukou_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddtime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShenhe(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ButieList entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ButieList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ButieList entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
