package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.breeds.EarTag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EAR_TAG".
*/
public class EarTagDao extends AbstractDao<EarTag, String> {

    public static final String TABLENAME = "EAR_TAG";

    /**
     * Properties of entity EarTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Status = new Property(0, int.class, "status", false, "STATUS");
        public final static Property Id = new Property(1, String.class, "id", true, "ID");
        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Addtime = new Property(4, String.class, "addtime", false, "ADDTIME");
        public final static Property User_id = new Property(5, String.class, "user_id", false, "USER_ID");
        public final static Property User_type = new Property(6, String.class, "user_type", false, "USER_TYPE");
    }


    public EarTagDao(DaoConfig config) {
        super(config);
    }
    
    public EarTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EAR_TAG\" (" + //
                "\"STATUS\" INTEGER NOT NULL ," + // 0: status
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: id
                "\"NUMBER\" TEXT," + // 2: number
                "\"TYPE\" TEXT," + // 3: type
                "\"ADDTIME\" TEXT," + // 4: addtime
                "\"USER_ID\" TEXT," + // 5: user_id
                "\"USER_TYPE\" TEXT);"); // 6: user_type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EAR_TAG_ID_DESC_STATUS_DESC_USER_ID ON \"EAR_TAG\"" +
                " (\"ID\" DESC,\"STATUS\" DESC,\"USER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EAR_TAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EarTag entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(5, addtime);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(6, user_id);
        }
 
        String user_type = entity.getUser_type();
        if (user_type != null) {
            stmt.bindString(7, user_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EarTag entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(5, addtime);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(6, user_id);
        }
 
        String user_type = entity.getUser_type();
        if (user_type != null) {
            stmt.bindString(7, user_type);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public EarTag readEntity(Cursor cursor, int offset) {
        EarTag entity = new EarTag( //
            cursor.getInt(offset + 0), // status
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // user_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EarTag entity, int offset) {
        entity.setStatus(cursor.getInt(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EarTag entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(EarTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EarTag entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
