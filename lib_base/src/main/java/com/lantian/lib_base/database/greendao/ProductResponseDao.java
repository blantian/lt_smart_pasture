package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.product.ProductResponse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_RESPONSE".
*/
public class ProductResponseDao extends AbstractDao<ProductResponse, String> {

    public static final String TABLENAME = "PRODUCT_RESPONSE";

    /**
     * Properties of entity ProductResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Product_id = new Property(0, String.class, "product_id", true, "PRODUCT_ID");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Iot_product_id = new Property(2, String.class, "iot_product_id", false, "IOT_PRODUCT_ID");
        public final static Property Product_name = new Property(3, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Product_type = new Property(4, String.class, "product_type", false, "PRODUCT_TYPE");
        public final static Property Product_pic = new Property(5, String.class, "product_pic", false, "PRODUCT_PIC");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Agreement = new Property(7, String.class, "agreement", false, "AGREEMENT");
        public final static Property Default_time = new Property(8, String.class, "default_time", false, "DEFAULT_TIME");
        public final static Property Product_min = new Property(9, String.class, "product_min", false, "PRODUCT_MIN");
        public final static Property Product_max = new Property(10, String.class, "product_max", false, "PRODUCT_MAX");
        public final static Property Product_scope = new Property(11, String.class, "product_scope", false, "PRODUCT_SCOPE");
        public final static Property Type = new Property(12, String.class, "type", false, "TYPE");
        public final static Property Created_at = new Property(13, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(14, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Product_icon = new Property(15, int.class, "product_icon", false, "PRODUCT_ICON");
    }


    public ProductResponseDao(DaoConfig config) {
        super(config);
    }
    
    public ProductResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_RESPONSE\" (" + //
                "\"PRODUCT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: product_id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"IOT_PRODUCT_ID\" TEXT," + // 2: iot_product_id
                "\"PRODUCT_NAME\" TEXT," + // 3: product_name
                "\"PRODUCT_TYPE\" TEXT," + // 4: product_type
                "\"PRODUCT_PIC\" TEXT," + // 5: product_pic
                "\"CONTENT\" TEXT," + // 6: content
                "\"AGREEMENT\" TEXT," + // 7: agreement
                "\"DEFAULT_TIME\" TEXT," + // 8: default_time
                "\"PRODUCT_MIN\" TEXT," + // 9: product_min
                "\"PRODUCT_MAX\" TEXT," + // 10: product_max
                "\"PRODUCT_SCOPE\" TEXT," + // 11: product_scope
                "\"TYPE\" TEXT," + // 12: type
                "\"CREATED_AT\" TEXT," + // 13: created_at
                "\"UPDATED_AT\" TEXT," + // 14: updated_at
                "\"PRODUCT_ICON\" INTEGER NOT NULL );"); // 15: product_icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_RESPONSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductResponse entity) {
        stmt.clearBindings();
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(1, product_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String iot_product_id = entity.getIot_product_id();
        if (iot_product_id != null) {
            stmt.bindString(3, iot_product_id);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(4, product_name);
        }
 
        String product_type = entity.getProduct_type();
        if (product_type != null) {
            stmt.bindString(5, product_type);
        }
 
        String product_pic = entity.getProduct_pic();
        if (product_pic != null) {
            stmt.bindString(6, product_pic);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String agreement = entity.getAgreement();
        if (agreement != null) {
            stmt.bindString(8, agreement);
        }
 
        String default_time = entity.getDefault_time();
        if (default_time != null) {
            stmt.bindString(9, default_time);
        }
 
        String product_min = entity.getProduct_min();
        if (product_min != null) {
            stmt.bindString(10, product_min);
        }
 
        String product_max = entity.getProduct_max();
        if (product_max != null) {
            stmt.bindString(11, product_max);
        }
 
        String product_scope = entity.getProduct_scope();
        if (product_scope != null) {
            stmt.bindString(12, product_scope);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(14, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(15, updated_at);
        }
        stmt.bindLong(16, entity.getProduct_icon());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductResponse entity) {
        stmt.clearBindings();
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(1, product_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String iot_product_id = entity.getIot_product_id();
        if (iot_product_id != null) {
            stmt.bindString(3, iot_product_id);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(4, product_name);
        }
 
        String product_type = entity.getProduct_type();
        if (product_type != null) {
            stmt.bindString(5, product_type);
        }
 
        String product_pic = entity.getProduct_pic();
        if (product_pic != null) {
            stmt.bindString(6, product_pic);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String agreement = entity.getAgreement();
        if (agreement != null) {
            stmt.bindString(8, agreement);
        }
 
        String default_time = entity.getDefault_time();
        if (default_time != null) {
            stmt.bindString(9, default_time);
        }
 
        String product_min = entity.getProduct_min();
        if (product_min != null) {
            stmt.bindString(10, product_min);
        }
 
        String product_max = entity.getProduct_max();
        if (product_max != null) {
            stmt.bindString(11, product_max);
        }
 
        String product_scope = entity.getProduct_scope();
        if (product_scope != null) {
            stmt.bindString(12, product_scope);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(14, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(15, updated_at);
        }
        stmt.bindLong(16, entity.getProduct_icon());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ProductResponse readEntity(Cursor cursor, int offset) {
        ProductResponse entity = new ProductResponse( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // product_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iot_product_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // product_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // product_pic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // agreement
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // default_time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // product_min
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // product_max
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // product_scope
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // created_at
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // updated_at
            cursor.getInt(offset + 15) // product_icon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductResponse entity, int offset) {
        entity.setProduct_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIot_product_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProduct_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProduct_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProduct_pic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAgreement(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDefault_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProduct_min(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProduct_max(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProduct_scope(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreated_at(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUpdated_at(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProduct_icon(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ProductResponse entity, long rowId) {
        return entity.getProduct_id();
    }
    
    @Override
    public String getKey(ProductResponse entity) {
        if(entity != null) {
            return entity.getProduct_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductResponse entity) {
        return entity.getProduct_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
