package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.login.LoginResponse.UserdataBean;

import com.lantian.lib_base.entity.module.response.login.LoginResponse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_RESPONSE".
*/
public class LoginResponseDao extends AbstractDao<LoginResponse, Void> {

    public static final String TABLENAME = "LOGIN_RESPONSE";

    /**
     * Properties of entity LoginResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Status = new Property(0, int.class, "status", false, "STATUS");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Userdata = new Property(4, String.class, "userdata", false, "USERDATA");
    }

    private final TypeConverter userdataConverter = new TypeConverter();

    public LoginResponseDao(DaoConfig config) {
        super(config);
    }
    
    public LoginResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_RESPONSE\" (" + //
                "\"STATUS\" INTEGER NOT NULL ," + // 0: status
                "\"TOKEN\" TEXT," + // 1: token
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"USERNAME\" TEXT," + // 3: username
                "\"USERDATA\" TEXT);"); // 4: userdata
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_LOGIN_RESPONSE_USER_ID_DESC_STATUS_DESC ON \"LOGIN_RESPONSE\"" +
                " (\"USER_ID\" DESC,\"STATUS\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_RESPONSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginResponse entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        UserdataBean userdata = entity.getUserdata();
        if (userdata != null) {
            stmt.bindString(5, userdataConverter.convertToDatabaseValue(userdata));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginResponse entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        UserdataBean userdata = entity.getUserdata();
        if (userdata != null) {
            stmt.bindString(5, userdataConverter.convertToDatabaseValue(userdata));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LoginResponse readEntity(Cursor cursor, int offset) {
        LoginResponse entity = new LoginResponse( //
            cursor.getInt(offset + 0), // status
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : userdataConverter.convertToEntityProperty(cursor.getString(offset + 4)) // userdata
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginResponse entity, int offset) {
        entity.setStatus(cursor.getInt(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserdata(cursor.isNull(offset + 4) ? null : userdataConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LoginResponse entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LoginResponse entity) {
        return null;
    }

    @Override
    public boolean hasKey(LoginResponse entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
