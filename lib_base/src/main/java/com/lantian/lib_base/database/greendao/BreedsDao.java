package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.breeds.Breeds;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BREEDS".
*/
public class BreedsDao extends AbstractDao<Breeds, Void> {

    public static final String TABLENAME = "BREEDS";

    /**
     * Properties of entity Breeds.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Status = new Property(0, int.class, "status", false, "STATUS");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Addtime = new Property(4, String.class, "addtime", false, "ADDTIME");
        public final static Property Shenhe = new Property(5, String.class, "shenhe", false, "SHENHE");
        public final static Property Img = new Property(6, String.class, "img", false, "IMG");
        public final static Property Memberid = new Property(7, String.class, "memberid", false, "MEMBERID");
        public final static Property Count = new Property(8, String.class, "count", false, "COUNT");
    }


    public BreedsDao(DaoConfig config) {
        super(config);
    }
    
    public BreedsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BREEDS\" (" + //
                "\"STATUS\" INTEGER NOT NULL ," + // 0: status
                "\"USERID\" TEXT," + // 1: userid
                "\"ID\" TEXT," + // 2: id
                "\"NAME\" TEXT," + // 3: name
                "\"ADDTIME\" TEXT," + // 4: addtime
                "\"SHENHE\" TEXT," + // 5: shenhe
                "\"IMG\" TEXT," + // 6: img
                "\"MEMBERID\" TEXT," + // 7: memberid
                "\"COUNT\" TEXT);"); // 8: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BREEDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Breeds entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(5, addtime);
        }
 
        String shenhe = entity.getShenhe();
        if (shenhe != null) {
            stmt.bindString(6, shenhe);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(7, img);
        }
 
        String memberid = entity.getMemberid();
        if (memberid != null) {
            stmt.bindString(8, memberid);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(9, count);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Breeds entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(5, addtime);
        }
 
        String shenhe = entity.getShenhe();
        if (shenhe != null) {
            stmt.bindString(6, shenhe);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(7, img);
        }
 
        String memberid = entity.getMemberid();
        if (memberid != null) {
            stmt.bindString(8, memberid);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(9, count);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Breeds readEntity(Cursor cursor, int offset) {
        Breeds entity = new Breeds( //
            cursor.getInt(offset + 0), // status
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shenhe
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // img
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memberid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Breeds entity, int offset) {
        entity.setStatus(cursor.getInt(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShenhe(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMemberid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Breeds entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Breeds entity) {
        return null;
    }

    @Override
    public boolean hasKey(Breeds entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
