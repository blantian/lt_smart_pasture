package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

import com.lantian.lib_base.entity.module.response.breeds.BreedsOfUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BREEDS_OF_USER".
*/
public class BreedsOfUserDao extends AbstractDao<BreedsOfUser, String> {

    public static final String TABLENAME = "BREEDS_OF_USER";

    /**
     * Properties of entity BreedsOfUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property Status = new Property(1, int.class, "status", false, "STATUS");
        public final static Property Message = new Property(2, String.class, "message", false, "MESSAGE");
        public final static Property Code = new Property(3, int.class, "code", false, "CODE");
        public final static Property Data = new Property(4, String.class, "data", false, "DATA");
    }

    private final ListConverter dataConverter = new ListConverter();

    public BreedsOfUserDao(DaoConfig config) {
        super(config);
    }
    
    public BreedsOfUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BREEDS_OF_USER\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: user_id
                "\"STATUS\" INTEGER NOT NULL ," + // 1: status
                "\"MESSAGE\" TEXT," + // 2: message
                "\"CODE\" INTEGER NOT NULL ," + // 3: code
                "\"DATA\" TEXT);"); // 4: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BREEDS_OF_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BreedsOfUser entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
        stmt.bindLong(2, entity.getStatus());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
        stmt.bindLong(4, entity.getCode());
 
        List data = entity.getData();
        if (data != null) {
            stmt.bindString(5, dataConverter.convertToDatabaseValue(data));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BreedsOfUser entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
        stmt.bindLong(2, entity.getStatus());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
        stmt.bindLong(4, entity.getCode());
 
        List data = entity.getData();
        if (data != null) {
            stmt.bindString(5, dataConverter.convertToDatabaseValue(data));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BreedsOfUser readEntity(Cursor cursor, int offset) {
        BreedsOfUser entity = new BreedsOfUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
            cursor.getInt(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message
            cursor.getInt(offset + 3), // code
            cursor.isNull(offset + 4) ? null : dataConverter.convertToEntityProperty(cursor.getString(offset + 4)) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BreedsOfUser entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStatus(cursor.getInt(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.getInt(offset + 3));
        entity.setData(cursor.isNull(offset + 4) ? null : dataConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BreedsOfUser entity, long rowId) {
        return entity.getUser_id();
    }
    
    @Override
    public String getKey(BreedsOfUser entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BreedsOfUser entity) {
        return entity.getUser_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
