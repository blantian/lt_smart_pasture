package com.lantian.lib_base.database.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 26): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 26;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        FarmMsgResponseDao.createTable(db, ifNotExists);
        countPlantsumDao.createTable(db, ifNotExists);
        CaoyuanListDao.createTable(db, ifNotExists);
        FarmInComeDao.createTable(db, ifNotExists);
        FarmSumDataDao.createTable(db, ifNotExists);
        ButieListDao.createTable(db, ifNotExists);
        HuzhuListDao.createTable(db, ifNotExists);
        FarmListResponseDao.createTable(db, ifNotExists);
        PersonListDao.createTable(db, ifNotExists);
        CheckUserDao.createTable(db, ifNotExists);
        HukuFindDao.createTable(db, ifNotExists);
        ProductResponseDao.createTable(db, ifNotExists);
        ImgsDao.createTable(db, ifNotExists);
        AddBreedDao.createTable(db, ifNotExists);
        addEarTagDao.createTable(db, ifNotExists);
        BreedFindDao.createTable(db, ifNotExists);
        BreedsDao.createTable(db, ifNotExists);
        PinzhongDao.createTable(db, ifNotExists);
        BreedsListDao.createTable(db, ifNotExists);
        InOutDao.createTable(db, ifNotExists);
        BreedsOfUserDao.createTable(db, ifNotExists);
        CountBreedTureDao.createTable(db, ifNotExists);
        BreedClassFindDao.createTable(db, ifNotExists);
        CountCompensateDao.createTable(db, ifNotExists);
        EarTagDao.createTable(db, ifNotExists);
        BreedIndexDao.createTable(db, ifNotExists);
        CountBreeddatasDao.createTable(db, ifNotExists);
        editEarTagDao.createTable(db, ifNotExists);
        LaiyuanDao.createTable(db, ifNotExists);
        AdressDao.createTable(db, ifNotExists);
        UserInfoDao.createTable(db, ifNotExists);
        LoginResponseDao.createTable(db, ifNotExists);
        DevsDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        FarmMsgResponseDao.dropTable(db, ifExists);
        countPlantsumDao.dropTable(db, ifExists);
        CaoyuanListDao.dropTable(db, ifExists);
        FarmInComeDao.dropTable(db, ifExists);
        FarmSumDataDao.dropTable(db, ifExists);
        ButieListDao.dropTable(db, ifExists);
        HuzhuListDao.dropTable(db, ifExists);
        FarmListResponseDao.dropTable(db, ifExists);
        PersonListDao.dropTable(db, ifExists);
        CheckUserDao.dropTable(db, ifExists);
        HukuFindDao.dropTable(db, ifExists);
        ProductResponseDao.dropTable(db, ifExists);
        ImgsDao.dropTable(db, ifExists);
        AddBreedDao.dropTable(db, ifExists);
        addEarTagDao.dropTable(db, ifExists);
        BreedFindDao.dropTable(db, ifExists);
        BreedsDao.dropTable(db, ifExists);
        PinzhongDao.dropTable(db, ifExists);
        BreedsListDao.dropTable(db, ifExists);
        InOutDao.dropTable(db, ifExists);
        BreedsOfUserDao.dropTable(db, ifExists);
        CountBreedTureDao.dropTable(db, ifExists);
        BreedClassFindDao.dropTable(db, ifExists);
        CountCompensateDao.dropTable(db, ifExists);
        EarTagDao.dropTable(db, ifExists);
        BreedIndexDao.dropTable(db, ifExists);
        CountBreeddatasDao.dropTable(db, ifExists);
        editEarTagDao.dropTable(db, ifExists);
        LaiyuanDao.dropTable(db, ifExists);
        AdressDao.dropTable(db, ifExists);
        UserInfoDao.dropTable(db, ifExists);
        LoginResponseDao.dropTable(db, ifExists);
        DevsDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(FarmMsgResponseDao.class);
        registerDaoClass(countPlantsumDao.class);
        registerDaoClass(CaoyuanListDao.class);
        registerDaoClass(FarmInComeDao.class);
        registerDaoClass(FarmSumDataDao.class);
        registerDaoClass(ButieListDao.class);
        registerDaoClass(HuzhuListDao.class);
        registerDaoClass(FarmListResponseDao.class);
        registerDaoClass(PersonListDao.class);
        registerDaoClass(CheckUserDao.class);
        registerDaoClass(HukuFindDao.class);
        registerDaoClass(ProductResponseDao.class);
        registerDaoClass(ImgsDao.class);
        registerDaoClass(AddBreedDao.class);
        registerDaoClass(addEarTagDao.class);
        registerDaoClass(BreedFindDao.class);
        registerDaoClass(BreedsDao.class);
        registerDaoClass(PinzhongDao.class);
        registerDaoClass(BreedsListDao.class);
        registerDaoClass(InOutDao.class);
        registerDaoClass(BreedsOfUserDao.class);
        registerDaoClass(CountBreedTureDao.class);
        registerDaoClass(BreedClassFindDao.class);
        registerDaoClass(CountCompensateDao.class);
        registerDaoClass(EarTagDao.class);
        registerDaoClass(BreedIndexDao.class);
        registerDaoClass(CountBreeddatasDao.class);
        registerDaoClass(editEarTagDao.class);
        registerDaoClass(LaiyuanDao.class);
        registerDaoClass(AdressDao.class);
        registerDaoClass(UserInfoDao.class);
        registerDaoClass(LoginResponseDao.class);
        registerDaoClass(DevsDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
