package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.items.Devs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVS".
*/
public class DevsDao extends AbstractDao<Devs, String> {

    public static final String TABLENAME = "DEVS";

    /**
     * Properties of entity Devs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Icon = new Property(0, int.class, "icon", false, "ICON");
        public final static Property Devname = new Property(1, String.class, "devname", false, "DEVNAME");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Ip = new Property(3, String.class, "ip", true, "IP");
        public final static Property Port = new Property(4, String.class, "port", false, "PORT");
        public final static Property Pass = new Property(5, String.class, "pass", false, "PASS");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property Userid = new Property(7, String.class, "userid", false, "USERID");
        public final static Property Devkind = new Property(8, int.class, "devkind", false, "DEVKIND");
    }


    public DevsDao(DaoConfig config) {
        super(config);
    }
    
    public DevsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVS\" (" + //
                "\"ICON\" INTEGER NOT NULL ," + // 0: icon
                "\"DEVNAME\" TEXT," + // 1: devname
                "\"NAME\" TEXT," + // 2: name
                "\"IP\" TEXT PRIMARY KEY NOT NULL ," + // 3: ip
                "\"PORT\" TEXT," + // 4: port
                "\"PASS\" TEXT," + // 5: pass
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"USERID\" TEXT," + // 7: userid
                "\"DEVKIND\" INTEGER NOT NULL );"); // 8: devkind
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Devs entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIcon());
 
        String devname = entity.getDevname();
        if (devname != null) {
            stmt.bindString(2, devname);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(4, ip);
        }
 
        String port = entity.getPort();
        if (port != null) {
            stmt.bindString(5, port);
        }
 
        String pass = entity.getPass();
        if (pass != null) {
            stmt.bindString(6, pass);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(8, userid);
        }
        stmt.bindLong(9, entity.getDevkind());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Devs entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIcon());
 
        String devname = entity.getDevname();
        if (devname != null) {
            stmt.bindString(2, devname);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(4, ip);
        }
 
        String port = entity.getPort();
        if (port != null) {
            stmt.bindString(5, port);
        }
 
        String pass = entity.getPass();
        if (pass != null) {
            stmt.bindString(6, pass);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(8, userid);
        }
        stmt.bindLong(9, entity.getDevkind());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public Devs readEntity(Cursor cursor, int offset) {
        Devs entity = new Devs( //
            cursor.getInt(offset + 0), // icon
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // devname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ip
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // port
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pass
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userid
            cursor.getInt(offset + 8) // devkind
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Devs entity, int offset) {
        entity.setIcon(cursor.getInt(offset + 0));
        entity.setDevname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPort(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPass(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setUserid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDevkind(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Devs entity, long rowId) {
        return entity.getIp();
    }
    
    @Override
    public String getKey(Devs entity) {
        if(entity != null) {
            return entity.getIp();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Devs entity) {
        return entity.getIp() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
