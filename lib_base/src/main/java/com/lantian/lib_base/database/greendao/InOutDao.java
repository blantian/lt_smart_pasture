package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.breeds.InOut;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IN_OUT".
*/
public class InOutDao extends AbstractDao<InOut, String> {

    public static final String TABLENAME = "IN_OUT";

    /**
     * Properties of entity InOut.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", true, "USERID");
        public final static Property Status = new Property(1, int.class, "status", false, "STATUS");
        public final static Property Income = new Property(2, String.class, "income", false, "INCOME");
        public final static Property Expenditure = new Property(3, String.class, "expenditure", false, "EXPENDITURE");
    }


    public InOutDao(DaoConfig config) {
        super(config);
    }
    
    public InOutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IN_OUT\" (" + //
                "\"USERID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userid
                "\"STATUS\" INTEGER NOT NULL ," + // 1: status
                "\"INCOME\" TEXT," + // 2: income
                "\"EXPENDITURE\" TEXT);"); // 3: expenditure
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IN_OUT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InOut entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
        stmt.bindLong(2, entity.getStatus());
 
        String income = entity.getIncome();
        if (income != null) {
            stmt.bindString(3, income);
        }
 
        String expenditure = entity.getExpenditure();
        if (expenditure != null) {
            stmt.bindString(4, expenditure);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InOut entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
        stmt.bindLong(2, entity.getStatus());
 
        String income = entity.getIncome();
        if (income != null) {
            stmt.bindString(3, income);
        }
 
        String expenditure = entity.getExpenditure();
        if (expenditure != null) {
            stmt.bindString(4, expenditure);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public InOut readEntity(Cursor cursor, int offset) {
        InOut entity = new InOut( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
            cursor.getInt(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // income
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // expenditure
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InOut entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStatus(cursor.getInt(offset + 1));
        entity.setIncome(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpenditure(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(InOut entity, long rowId) {
        return entity.getUserid();
    }
    
    @Override
    public String getKey(InOut entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InOut entity) {
        return entity.getUserid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
