package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.farmer.farmdatas.FarmSumData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FARM_SUM_DATA".
*/
public class FarmSumDataDao extends AbstractDao<FarmSumData, String> {

    public static final String TABLENAME = "FARM_SUM_DATA";

    /**
     * Properties of entity FarmSumData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property Renkou = new Property(1, int.class, "renkou", false, "RENKOU");
        public final static Property Zonghui = new Property(2, String.class, "zonghui", false, "ZONGHUI");
        public final static Property Mianji = new Property(3, String.class, "mianji", false, "MIANJI");
        public final static Property Butie = new Property(4, String.class, "butie", false, "BUTIE");
    }


    public FarmSumDataDao(DaoConfig config) {
        super(config);
    }
    
    public FarmSumDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FARM_SUM_DATA\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: user_id
                "\"RENKOU\" INTEGER NOT NULL ," + // 1: renkou
                "\"ZONGHUI\" TEXT," + // 2: zonghui
                "\"MIANJI\" TEXT," + // 3: mianji
                "\"BUTIE\" TEXT);"); // 4: butie
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FARM_SUM_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FarmSumData entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
        stmt.bindLong(2, entity.getRenkou());
 
        String zonghui = entity.getZonghui();
        if (zonghui != null) {
            stmt.bindString(3, zonghui);
        }
 
        String mianji = entity.getMianji();
        if (mianji != null) {
            stmt.bindString(4, mianji);
        }
 
        String butie = entity.getButie();
        if (butie != null) {
            stmt.bindString(5, butie);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FarmSumData entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
        stmt.bindLong(2, entity.getRenkou());
 
        String zonghui = entity.getZonghui();
        if (zonghui != null) {
            stmt.bindString(3, zonghui);
        }
 
        String mianji = entity.getMianji();
        if (mianji != null) {
            stmt.bindString(4, mianji);
        }
 
        String butie = entity.getButie();
        if (butie != null) {
            stmt.bindString(5, butie);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FarmSumData readEntity(Cursor cursor, int offset) {
        FarmSumData entity = new FarmSumData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
            cursor.getInt(offset + 1), // renkou
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zonghui
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mianji
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // butie
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FarmSumData entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRenkou(cursor.getInt(offset + 1));
        entity.setZonghui(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMianji(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setButie(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FarmSumData entity, long rowId) {
        return entity.getUser_id();
    }
    
    @Override
    public String getKey(FarmSumData entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FarmSumData entity) {
        return entity.getUser_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
