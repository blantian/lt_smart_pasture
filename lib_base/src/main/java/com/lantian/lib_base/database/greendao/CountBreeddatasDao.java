package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.breeds.CountBreeddatas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNT_BREEDDATAS".
*/
public class CountBreeddatasDao extends AbstractDao<CountBreeddatas, String> {

    public static final String TABLENAME = "COUNT_BREEDDATAS";

    /**
     * Properties of entity CountBreeddatas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Status = new Property(0, int.class, "status", false, "STATUS");
        public final static Property Userid = new Property(1, String.class, "userid", true, "USERID");
        public final static Property Breeddata1 = new Property(2, String.class, "breeddata1", false, "BREEDDATA1");
        public final static Property Breeddata2 = new Property(3, String.class, "breeddata2", false, "BREEDDATA2");
        public final static Property Breeddata3 = new Property(4, String.class, "Breeddata3", false, "BREEDDATA3");
    }


    public CountBreeddatasDao(DaoConfig config) {
        super(config);
    }
    
    public CountBreeddatasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNT_BREEDDATAS\" (" + //
                "\"STATUS\" INTEGER NOT NULL ," + // 0: status
                "\"USERID\" TEXT PRIMARY KEY NOT NULL ," + // 1: userid
                "\"BREEDDATA1\" TEXT," + // 2: breeddata1
                "\"BREEDDATA2\" TEXT," + // 3: breeddata2
                "\"BREEDDATA3\" TEXT);"); // 4: Breeddata3
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_COUNT_BREEDDATAS_USERID_DESC_STATUS_DESC ON \"COUNT_BREEDDATAS\"" +
                " (\"USERID\" DESC,\"STATUS\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNT_BREEDDATAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CountBreeddatas entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String breeddata1 = entity.getBreeddata1();
        if (breeddata1 != null) {
            stmt.bindString(3, breeddata1);
        }
 
        String breeddata2 = entity.getBreeddata2();
        if (breeddata2 != null) {
            stmt.bindString(4, breeddata2);
        }
 
        String Breeddata3 = entity.getBreeddata3();
        if (Breeddata3 != null) {
            stmt.bindString(5, Breeddata3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CountBreeddatas entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String breeddata1 = entity.getBreeddata1();
        if (breeddata1 != null) {
            stmt.bindString(3, breeddata1);
        }
 
        String breeddata2 = entity.getBreeddata2();
        if (breeddata2 != null) {
            stmt.bindString(4, breeddata2);
        }
 
        String Breeddata3 = entity.getBreeddata3();
        if (Breeddata3 != null) {
            stmt.bindString(5, Breeddata3);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public CountBreeddatas readEntity(Cursor cursor, int offset) {
        CountBreeddatas entity = new CountBreeddatas( //
            cursor.getInt(offset + 0), // status
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // breeddata1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // breeddata2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Breeddata3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CountBreeddatas entity, int offset) {
        entity.setStatus(cursor.getInt(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBreeddata1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBreeddata2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBreeddata3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CountBreeddatas entity, long rowId) {
        return entity.getUserid();
    }
    
    @Override
    public String getKey(CountBreeddatas entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CountBreeddatas entity) {
        return entity.getUserid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
