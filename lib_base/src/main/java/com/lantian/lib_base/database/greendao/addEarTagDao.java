package com.lantian.lib_base.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lantian.lib_base.entity.module.response.breeds.addEarTag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADD_EAR_TAG".
*/
public class addEarTagDao extends AbstractDao<addEarTag, String> {

    public static final String TABLENAME = "ADD_EAR_TAG";

    /**
     * Properties of entity addEarTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Status = new Property(0, int.class, "status", false, "STATUS");
        public final static Property Id = new Property(1, String.class, "id", true, "ID");
        public final static Property Breed_id = new Property(2, String.class, "breed_id", false, "BREED_ID");
        public final static Property Eartag_id = new Property(3, String.class, "eartag_id", false, "EARTAG_ID");
        public final static Property Addtime = new Property(4, String.class, "addtime", false, "ADDTIME");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Pid = new Property(6, String.class, "pid", false, "PID");
        public final static Property Weight = new Property(7, String.class, "weight", false, "WEIGHT");
        public final static Property Age = new Property(8, String.class, "age", false, "AGE");
        public final static Property Birthday = new Property(9, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Type_in = new Property(10, String.class, "type_in", false, "TYPE_IN");
        public final static Property Time = new Property(11, String.class, "time", false, "TIME");
        public final static Property Survival = new Property(12, String.class, "survival", false, "SURVIVAL");
        public final static Property Img = new Property(13, String.class, "img", false, "IMG");
        public final static Property User_id = new Property(14, String.class, "user_id", false, "USER_ID");
        public final static Property Qrcode = new Property(15, String.class, "qrcode", false, "QRCODE");
        public final static Property Length = new Property(16, String.class, "length", false, "LENGTH");
        public final static Property Update_userid = new Property(17, String.class, "update_userid", false, "UPDATE_USERID");
        public final static Property Edittime = new Property(18, String.class, "edittime", false, "EDITTIME");
        public final static Property Hah = new Property(19, String.class, "hah", false, "HAH");
        public final static Property Breeds_id = new Property(20, String.class, "breeds_id", false, "BREEDS_ID");
        public final static Property Number = new Property(21, String.class, "number", false, "NUMBER");
        public final static Property Sretype = new Property(22, String.class, "sretype", false, "SRETYPE");
        public final static Property Sretypein = new Property(23, String.class, "sretypein", false, "SRETYPEIN");
        public final static Property Userbr_id = new Property(24, String.class, "userbr_id", false, "USERBR_ID");
    }


    public addEarTagDao(DaoConfig config) {
        super(config);
    }
    
    public addEarTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADD_EAR_TAG\" (" + //
                "\"STATUS\" INTEGER NOT NULL ," + // 0: status
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: id
                "\"BREED_ID\" TEXT," + // 2: breed_id
                "\"EARTAG_ID\" TEXT," + // 3: eartag_id
                "\"ADDTIME\" TEXT," + // 4: addtime
                "\"TYPE\" TEXT," + // 5: type
                "\"PID\" TEXT," + // 6: pid
                "\"WEIGHT\" TEXT," + // 7: weight
                "\"AGE\" TEXT," + // 8: age
                "\"BIRTHDAY\" TEXT," + // 9: birthday
                "\"TYPE_IN\" TEXT," + // 10: type_in
                "\"TIME\" TEXT," + // 11: time
                "\"SURVIVAL\" TEXT," + // 12: survival
                "\"IMG\" TEXT," + // 13: img
                "\"USER_ID\" TEXT," + // 14: user_id
                "\"QRCODE\" TEXT," + // 15: qrcode
                "\"LENGTH\" TEXT," + // 16: length
                "\"UPDATE_USERID\" TEXT," + // 17: update_userid
                "\"EDITTIME\" TEXT," + // 18: edittime
                "\"HAH\" TEXT," + // 19: hah
                "\"BREEDS_ID\" TEXT," + // 20: breeds_id
                "\"NUMBER\" TEXT," + // 21: number
                "\"SRETYPE\" TEXT," + // 22: sretype
                "\"SRETYPEIN\" TEXT," + // 23: sretypein
                "\"USERBR_ID\" TEXT);"); // 24: userbr_id
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ADD_EAR_TAG_ID_DESC_STATUS_DESC_USER_ID ON \"ADD_EAR_TAG\"" +
                " (\"ID\" DESC,\"STATUS\" DESC,\"USER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADD_EAR_TAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, addEarTag entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String breed_id = entity.getBreed_id();
        if (breed_id != null) {
            stmt.bindString(3, breed_id);
        }
 
        String eartag_id = entity.getEartag_id();
        if (eartag_id != null) {
            stmt.bindString(4, eartag_id);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(5, addtime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(7, pid);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(8, weight);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(9, age);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        String type_in = entity.getType_in();
        if (type_in != null) {
            stmt.bindString(11, type_in);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(12, time);
        }
 
        String survival = entity.getSurvival();
        if (survival != null) {
            stmt.bindString(13, survival);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(14, img);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(15, user_id);
        }
 
        String qrcode = entity.getQrcode();
        if (qrcode != null) {
            stmt.bindString(16, qrcode);
        }
 
        String length = entity.getLength();
        if (length != null) {
            stmt.bindString(17, length);
        }
 
        String update_userid = entity.getUpdate_userid();
        if (update_userid != null) {
            stmt.bindString(18, update_userid);
        }
 
        String edittime = entity.getEdittime();
        if (edittime != null) {
            stmt.bindString(19, edittime);
        }
 
        String hah = entity.getHah();
        if (hah != null) {
            stmt.bindString(20, hah);
        }
 
        String breeds_id = entity.getBreeds_id();
        if (breeds_id != null) {
            stmt.bindString(21, breeds_id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(22, number);
        }
 
        String sretype = entity.getSretype();
        if (sretype != null) {
            stmt.bindString(23, sretype);
        }
 
        String sretypein = entity.getSretypein();
        if (sretypein != null) {
            stmt.bindString(24, sretypein);
        }
 
        String userbr_id = entity.getUserbr_id();
        if (userbr_id != null) {
            stmt.bindString(25, userbr_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, addEarTag entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String breed_id = entity.getBreed_id();
        if (breed_id != null) {
            stmt.bindString(3, breed_id);
        }
 
        String eartag_id = entity.getEartag_id();
        if (eartag_id != null) {
            stmt.bindString(4, eartag_id);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(5, addtime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(7, pid);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(8, weight);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(9, age);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        String type_in = entity.getType_in();
        if (type_in != null) {
            stmt.bindString(11, type_in);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(12, time);
        }
 
        String survival = entity.getSurvival();
        if (survival != null) {
            stmt.bindString(13, survival);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(14, img);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(15, user_id);
        }
 
        String qrcode = entity.getQrcode();
        if (qrcode != null) {
            stmt.bindString(16, qrcode);
        }
 
        String length = entity.getLength();
        if (length != null) {
            stmt.bindString(17, length);
        }
 
        String update_userid = entity.getUpdate_userid();
        if (update_userid != null) {
            stmt.bindString(18, update_userid);
        }
 
        String edittime = entity.getEdittime();
        if (edittime != null) {
            stmt.bindString(19, edittime);
        }
 
        String hah = entity.getHah();
        if (hah != null) {
            stmt.bindString(20, hah);
        }
 
        String breeds_id = entity.getBreeds_id();
        if (breeds_id != null) {
            stmt.bindString(21, breeds_id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(22, number);
        }
 
        String sretype = entity.getSretype();
        if (sretype != null) {
            stmt.bindString(23, sretype);
        }
 
        String sretypein = entity.getSretypein();
        if (sretypein != null) {
            stmt.bindString(24, sretypein);
        }
 
        String userbr_id = entity.getUserbr_id();
        if (userbr_id != null) {
            stmt.bindString(25, userbr_id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public addEarTag readEntity(Cursor cursor, int offset) {
        addEarTag entity = new addEarTag( //
            cursor.getInt(offset + 0), // status
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // breed_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // eartag_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weight
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // age
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // birthday
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type_in
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // time
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // survival
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // img
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // user_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // qrcode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // length
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // update_userid
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // edittime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // hah
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // breeds_id
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // number
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // sretype
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // sretypein
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // userbr_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, addEarTag entity, int offset) {
        entity.setStatus(cursor.getInt(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBreed_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEartag_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeight(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAge(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBirthday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType_in(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSurvival(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImg(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUser_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQrcode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLength(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUpdate_userid(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEdittime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHah(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBreeds_id(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setNumber(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSretype(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSretypein(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setUserbr_id(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final String updateKeyAfterInsert(addEarTag entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(addEarTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(addEarTag entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
